platform :ios, '10.0'
use_frameworks!

target 'Agile diary' do
  workspace 'Agile diary.xcworkspace'
  project 'Agile diary.xcodeproj'
    
  pod 'SwipeCellKit'
  pod 'Foto'
  pod 'Charts'
  pod 'Dwifft'
  pod 'FloatingPanel'
  
  pod 'Firebase/Core'
  pod 'Firebase/Auth'
  pod 'Firebase/Firestore'
  pod 'Firebase/Storage'
  pod 'FBSDKLoginKit'
  
  pod 'Fabric'
  pod 'Crashlytics'
end

target 'Agile diary debug' do
    workspace 'Agile diary.xcworkspace'
    project 'Agile diary.xcodeproj'
    
    pod 'SwipeCellKit'
    pod 'Foto'
    pod 'Charts'
    pod 'Dwifft'
    
    pod 'Firebase/Core'
    pod 'Firebase/Auth'
    pod 'Firebase/Firestore'
    pod 'Firebase/Storage'
    pod 'FBSDKLoginKit'
    
    pod 'Fabric'
    pod 'Crashlytics'
end

target 'HabitsTodayExtension' do
    inherit! :search_paths
    
    workspace 'Agile diary.xcworkspace'
    project 'Agile diary.xcodeproj'
    
    pod 'SwipeCellKit'
end

target 'Synchronization' do
    project 'Synchronization.xcodeproj'
    
    pod 'Firebase/Core'
    pod 'Firebase/Firestore'
end

target 'Authorization' do    
    project 'Authorization.xcodeproj'
    
    pod 'Firebase/Core'
    pod 'Firebase/Auth'
    pod 'FBSDKLoginKit'
end

target 'UIComponents' do
    project 'UIComponents.xcodeproj'
end

target 'TasksKit' do
  project 'TasksKit.xcodeproj'
  
  pod 'Dwifft'
end

target 'Workset' do
  project 'Workset.xcodeproj'
  
  pod 'SwipeCellKit'
  pod 'Foto'
end

post_install do |installer|

    # Remove dublicated static libraries
    def dedublicate_static_libraries(sharedLibrary, installer)
        installer.aggregate_targets.each do |aggregate_target|
            
            if aggregate_target.name == 'Pods-Authorization' ||
                aggregate_target.name == 'Pods-Synchronization'
                
                aggregate_target.xcconfigs.each do |config_name, config_file|
                    sharedLibraryPodTargets = sharedLibrary.pod_targets
                    
                    aggregate_target.pod_targets.select { |pod_target| sharedLibraryPodTargets.include?(pod_target) }.each do |pod_target|
                        pod_target.specs.each do |spec|
                            frameworkPaths = unless spec.attributes_hash['ios'].nil? then spec.attributes_hash['ios']['vendored_frameworks'] else spec.attributes_hash['vendored_frameworks'] end || Set.new
                        frameworkNames = Array(frameworkPaths).map(&:to_s).map do |filename|
                            extension = File.extname filename
                            File.basename filename, extension
                        end
                        frameworkNames.each do |name|
                            puts "Removing #{name} from OTHER_LDFLAGS for #{aggregate_target.name} target"
                            config_file.frameworks.delete(name)
                        end
                    end
                end
                xcconfig_path = aggregate_target.xcconfig_path(config_name)
                config_file.save_as(xcconfig_path)
            end
        end
    end
    end

    sharedLibrary = installer.aggregate_targets.find { |aggregate_target| aggregate_target.name == 'Pods-Authorization' }
    dedublicate_static_libraries(sharedLibrary, installer)

    sharedLibrary = installer.aggregate_targets.find { |aggregate_target| aggregate_target.name == 'Pods-Synchronization' }
    dedublicate_static_libraries(sharedLibrary, installer)

end
